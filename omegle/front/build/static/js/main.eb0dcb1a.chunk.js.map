{"version":3,"sources":["pages/main/index.js","pages/text/index.js","routes.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["Main","state","video","this","className","to","disabled","Component","Text","type","Routes","exact","path","component","Header","id","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wTAKqBA,G,iNACjBC,MAAQ,CACJC,OAAO,G,wEAOF,IACEA,EAASC,KAAKF,MAAdC,MACP,OACI,yBAAKE,UAAU,aAAf,0DAEI,yBAAKA,UAAU,WACX,kBAAC,IAAD,CAAMC,GAAG,SAAT,WADJ,YAII,uBAAGC,UAAsB,IAAVJ,GAAf,e,GAlBcK,cCDbC,G,uLAEd,OACK,yBAAKJ,UAAU,aACX,yBAAKA,UAAU,SAGf,yBAAKA,UAAU,WACX,0CADJ,YAII,2BAAOK,KAAK,SAJhB,YAOI,gD,GAdcF,cCanBG,EAXA,kBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWb,IACjC,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,QAAQC,UAAWL,OCFlCM,G,MANA,kBAEX,4BAAQC,GAAG,eAAX,cCaWC,G,MAVH,kBAER,yBAAKZ,UAAU,OACf,kBAAC,EAAD,MAEA,kBAAC,EAAD,SCAgBa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.eb0dcb1a.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nimport './styles.css'\n\nexport default class Main extends Component{\n    state = {\n        video: false,\n    }\n\n \n \n\n\n    render(){\n        const {video} = this.state\n        return (\n            <div className='main-page'>\n                Aperte em 'texto' para chat ou 'video' para conferencia\n                <div className='actions'>\n                    <Link to=\"/text\"> Texto </Link> \n                    &nbsp;\n                    &nbsp; \n                    <a disabled = {video === false} >Video</a>                 \n                </div>         \n            </div>\n            \n        )\n    }\n\n\n\n}","import React, { Component } from 'react'\n\nimport './styles.css'\n\nexport default class Text extends Component{\n    render(){\n       return (\n            <div className='text-page'>\n                <div className='chat'>\n                    \n                </div>\n                <div className='actions'>\n                    <button>Trocar</button>\n                    &nbsp;\n                    &nbsp; \n                    <input type='text'/>\n                    &nbsp;\n                    &nbsp; \n                    <button>Enviar</button> \n                    \n                </div>\n\n            </div>\n       ) \n\n    }\n}","import React from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\n\nimport Main from './pages/main/'\nimport Text from './pages/text/'\n\nconst Routes = () => (\n    <BrowserRouter>\n        <Switch>\n            <Route exact path='/' component={Main}/>\n            <Route exact path='/text' component={Text}/>\n\n        </Switch>\n    \n    </BrowserRouter>\n)\n\nexport default Routes","import React from 'react';\nimport './styles.css'\nconst Header = () => (\n\n    <header id='main-header'> OMEGLE </header>\n\n)\n\nexport default Header;","import React from 'react';\nimport Routes from './routes'\nimport Header from  './components/Header/'\nimport Main from './pages/main/'\nimport Text from './pages/text/'\nimport './styles.css'\n\nconst App = () => \n   (\n    <div className=\"App\">\n    <Header />\n    \n    <Routes />\n    </div>\n  );\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
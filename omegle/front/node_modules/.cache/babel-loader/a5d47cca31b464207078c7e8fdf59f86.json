{"ast":null,"code":"/* global module, require */\n\n/**\r\n * Utility functions specific to EasyRTC.\r\n *\r\n * @module      easyrtc_util\r\n * @author      Priologic Software, info@easyrtc.com\r\n * @copyright   Copyright 2016 Priologic Software. All rights reserved.\r\n * @license     BSD v2, see LICENSE file in module root folder.\r\n */\nvar util = require(\"util\");\n\nvar _ = require(\"underscore\"); // General utility functions external module\n\n\nvar g = require(\"./general_util\"); // General utility functions local module\n\n\nvar e = require(\"./easyrtc_private_obj\"); // EasyRTC private object\n\n/**\r\n *  Object to hold EasyRTC Utility methods and classes.\r\n *\r\n * @class\r\n */\n\n\nvar eu = module.exports;\n/**\r\n * Disconnects socket. Failure results in a debug level log message.\r\n *\r\n * @param       {Object} socket         Socket.io connection object.\r\n */\n\neu.socketDisconnect = function (socket) {\n  try {\n    socket.disconnect();\n  } catch (err) {\n    eu.log(\"debug\", \"Socket disconnection command failed. Socket may already be disconnected.\");\n  }\n};\n/**\r\n * Custom Error Object for EasyRTC Server Errors.\r\n *\r\n * @extends     Error\r\n * @param       {string} msg            Text message describing the error.\r\n * @returns     {Error}\r\n */\n\n\neu.ServerError = function (msg) {\n  eu.ServerError.super_.call(this, msg, this.constructor);\n};\n\nutil.inherits(eu.ServerError, g.AbstractError);\neu.ServerError.prototype.name = \"Server Error\";\neu.ServerError.prototype.errorLevel = \"error\";\n/**\r\n * Custom Error Object for EasyRTC Application Errors.\r\n *\r\n * @extends     Error\r\n * @param       {string} msg            Text message describing the error.\r\n * @returns     {Error}\r\n */\n\neu.ApplicationError = function (msg) {\n  eu.ApplicationError.super_.call(this, msg, this.constructor);\n};\n\nutil.inherits(eu.ApplicationError, g.AbstractError);\neu.ApplicationError.prototype.name = \"Application Error\";\neu.ApplicationError.prototype.errorLevel = \"error\";\n/**\r\n * Custom Error Object for Connection Errors.\r\n *\r\n * @extends     Error\r\n * @param       {string} msg            Text message describing the error.\r\n * @returns     {Error}\r\n */\n\neu.ConnectionError = function (msg) {\n  eu.ConnectionError.super_.call(this, msg, this.constructor);\n};\n\nutil.inherits(eu.ConnectionError, g.AbstractError);\neu.ConnectionError.prototype.name = \"Connection Error\";\neu.ConnectionError.prototype.errorLevel = \"error\";\n/**\r\n * Custom Error Object for EasyRTC Server Warnings.\r\n *\r\n * @extends     Error\r\n * @param       {string} msg            Text message describing the error.\r\n * @returns     {Error}\r\n */\n\neu.ServerWarning = function (msg) {\n  eu.ServerWarning.super_.call(this, msg, this.constructor);\n};\n\nutil.inherits(eu.ServerWarning, g.AbstractError);\neu.ServerWarning.prototype.name = \"Server Warning\";\neu.ServerWarning.prototype.errorLevel = \"warning\";\n/**\r\n * Custom Error Object for EasyRTC Application Warnings.\r\n *\r\n * @extends     Error\r\n * @param       {string} msg            Text message describing the error.\r\n * @returns     {Error}\r\n */\n\neu.ApplicationWarning = function (msg) {\n  eu.ApplicationWarning.super_.call(this, msg, this.constructor);\n};\n\nutil.inherits(eu.ApplicationWarning, g.AbstractError);\neu.ApplicationWarning.prototype.name = \"Application Warning\";\neu.ApplicationWarning.prototype.errorLevel = \"warning\";\n/**\r\n * Custom Error Object for Connection Warnings.\r\n *\r\n * @extends     Error\r\n * @param       {string} msg            Text message describing the error.\r\n * @returns     {Error}\r\n */\n\neu.ConnectionWarning = function (msg) {\n  eu.ConnectionWarning.super_.call(this, msg, this.constructor);\n};\n\nutil.inherits(eu.ConnectionWarning, g.AbstractError);\neu.ConnectionWarning.prototype.name = \"Connection Warning\";\neu.ConnectionWarning.prototype.errorLevel = \"warning\";\n/**\r\n * Determines if an Error object is an instance of ApplicationError, ConnectionError, or ServerError. If it is, it will return true.\r\n *\r\n * @param   {Error}     err\r\n * @return  {Boolean}\r\n */\n\neu.isError = function (err) {\n  if (err && (err instanceof eu.ConnectionError || err instanceof eu.ApplicationError || err instanceof eu.ServerError || err instanceof Error)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n/**\r\n * Determines if an Error object is an instance of ApplicationWarning, ConnectionWarning, or ServerWarning. If it is, it will return true.\r\n *\r\n * @param   {Error}     err\r\n * @return  {Boolean}\r\n */\n\n\neu.isWarning = function (err) {\n  if (err && (err instanceof eu.ConnectionWarning || err instanceof eu.ApplicationWarning || err instanceof eu.ServerWarning)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n/**\r\n * Returns a random available easyrtcid.\r\n *\r\n * @return  {String} Available easyrtcid. A unique identifier for an EasyRTC connection.\r\n */\n\n\neu.getAvailableEasyrtcid = function () {\n  var newEasyrtcid = \"\";\n  var easyrtcidExists = false;\n\n  do {\n    newEasyrtcid = g.randomString();\n    easyrtcidExists = false;\n\n    for (var key in e.app) {\n      if (e.app[key].connection[newEasyrtcid]) {\n        easyrtcidExists = true;\n        break;\n      }\n    }\n  } while (easyrtcidExists);\n\n  return newEasyrtcid;\n};","map":null,"metadata":{},"sourceType":"script"}
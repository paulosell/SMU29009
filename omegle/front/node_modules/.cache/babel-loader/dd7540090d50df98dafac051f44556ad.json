{"ast":null,"code":"/* global module, require, process, console */\n\n/**\r\n * @file        General utility functions not specific to EasyRTC\r\n * @module      general_util\r\n * @author      Priologic Software, info@easyrtc.com\r\n * @copyright   Copyright 2016 Priologic Software. All rights reserved.\r\n * @license     BSD v2, see LICENSE file in module root folder.\r\n */\nvar util = require(\"util\");\n/**\r\n *  Object to hold EasyRTC General Utility methods and classes.\r\n *\r\n * @class\r\n */\n\n\nvar g = module.exports;\n/**\r\n * Performs a deep copy of an object, returning the duplicate.\r\n * Do not use on objects with circular references.\r\n *\r\n * @param       {Object} input          Input variable (or object) to be copied.\r\n * @returns     {Object}                New copy of variable.\r\n */\n\ng.deepCopy = function (input) {\n  if (input === null || input === undefined || typeof input !== \"object\" || input.constructor !== Object && input.constructor !== Array) {\n    return input;\n  }\n\n  if (input.constructor === Boolean || input.constructor === Date || input.constructor === Function || input.constructor === Number || input.constructor === RegExp || input.constructor === String) {\n    return new input.constructor(input);\n  }\n\n  var copy;\n\n  if (input instanceof Array) {\n    copy = [];\n\n    for (var i = 0, len = input.length; i < len; i++) {\n      copy[i] = g.deepCopy(input[i]);\n    }\n\n    return copy;\n  }\n\n  if (input instanceof Object) {\n    copy = {};\n\n    for (var key in input) {\n      if (input.hasOwnProperty(key)) {\n        copy[key] = g.deepCopy(input[key]);\n      }\n    }\n\n    return copy;\n  }\n\n  return null;\n};\n/**\r\n * Returns a field from the package.json file in the module root.\r\n * Giving null field name will return the full contents of the file.\r\n * If a field name is provided, it will return null if the field not found.\r\n *\r\n * @param       {Object} fieldName      Name of field you wish to return.\r\n * @returns     {Object}                Value of the given field, or the full contents of the file if a null field is given.\r\n */\n\n\ng.getPackageData = function (fieldName) {\n  var packageFile = require(\"../package\");\n\n  if (!fieldName) {\n    return g.deepCopy(packageFile);\n  } else if (packageFile[fieldName]) {\n    return g.deepCopy(packageFile[fieldName]);\n  } else {\n    return null;\n  }\n};\n/* An abstract error object which should be easy to extend for custom Error classes.\r\n *\r\n * @copyright Based on code in article by Dustin Seno.\r\n *\r\n * @param   {String}    Custom error message.\r\n * @param   {Object}    Constructor property.\r\n *\r\n */\n\n\ng.AbstractError = function (msg, constr) {\n  Error.captureStackTrace(this, constr || this);\n  this.message = msg || \"Error\";\n};\n\nutil.inherits(g.AbstractError, Error);\ng.AbstractError.prototype.name = \"Abstract Error\";\n/**\r\n * Reads package.json and ensures all required modules are installed. Will exit if one or more is not found.\r\n */\n\ng.checkModules = function () {\n  var easyrtcPackage;\n\n  try {\n    easyrtcPackage = require(\"../package\");\n  } catch (e) {\n    console.log(\"ERROR: Could not load package.json from project root. This file is required for reading project properties.\");\n    process.exit(1);\n  }\n\n  var moduleExists = function (modName) {\n    try {\n      return require.resolve(modName);\n    } catch (e) {\n      return false;\n    }\n  };\n\n  var isModuleMissing = false;\n\n  for (var key in easyrtcPackage.dependencies) {\n    if (!moduleExists(key)) {\n      isModuleMissing = true;\n      console.log(\"ERROR: Missing module '\" + key + \"'\");\n    }\n  }\n\n  if (isModuleMissing) {\n    console.log(\"ERROR: Required modules are not installed. Run 'npm install' from command line.\");\n    process.exit(1);\n  }\n\n  delete require.cache[easyrtcPackage];\n};\n/*\r\n * Return a random string of characters\r\n *\r\n * @param {Integer} stringLength    Number of random characters the returned string should contain. Defaults to 16.\r\n * @param {String}  chars           Available characters to use in a string. Defaults to [A-Za-z0-9]\r\n * @returns {String}                Generated random string\r\n *\r\n */\n\n\ng.randomString = function (stringLength, chars) {\n  var newString = \"\";\n\n  if (!chars) {\n    chars = \"ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz0123456789\";\n  }\n\n  if (!stringLength) {\n    stringLength = 16;\n  }\n\n  for (var i = 0; i < stringLength; i = i + 1) {\n    var randomNumber = Math.floor(Math.random() * chars.length);\n    newString += chars.substring(randomNumber, randomNumber + 1);\n  }\n\n  return newString;\n};","map":null,"metadata":{},"sourceType":"script"}
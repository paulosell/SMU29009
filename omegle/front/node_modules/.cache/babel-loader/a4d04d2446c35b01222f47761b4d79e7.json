{"ast":null,"code":"/* global module, require */\n\n/**\r\n * @file        Default options used within EasyRTC. Overriding of default options should be done using the public listen() or setOption() functions.\r\n * @module      easyrtc_default_options\r\n * @author      Priologic Software, info@easyrtc.com\r\n * @copyright   Copyright 2016 Priologic Software. All rights reserved.\r\n * @license     BSD v2, see LICENSE file in module root folder.\r\n */\nvar option = {}; // Application Options\n\noption.appDefaultName = \"default\"; // The default application a connection belongs to if it is not initially specified.\n\noption.appAutoCreateEnable = true; // Enables the creation of rooms from the API. Occurs when client joins a nonexistent room.\n\noption.appDefaultFieldObj = null; // Default fields which are set when an application is created. In form of {\"fieldName\":{fieldValue:<JsonObj>, fieldOption:{isShared:<boolean>}}[, ...]}\n\noption.appIceServers = [// Array of STUN and TURN servers. By default there is only publicly available STUN servers.\n{\n  urls: \"stun:stun.l.google.com:19302\"\n}, {\n  urls: \"stun:stun.sipgate.net\"\n}, {\n  urls: \"stun:217.10.68.152\"\n}, {\n  urls: \"stun:stun.sipgate.net:10000\"\n}, {\n  urls: \"stun:217.10.68.152:10000\"\n}]; // Room Options\n\noption.roomDefaultEnable = true; // Enables connections joining a default room if it is not initially specified. If false, than a connection initially may be in no room.\n\noption.roomDefaultName = \"default\"; // The default room a connection joins if it is not initially specified.\n\noption.roomAutoCreateEnable = true; // Enables the creation of rooms from the API. Occurs when client joins a nonexistent room.\n\noption.roomDefaultFieldObj = null; // Default fields which are set when a room is created. In form of {\"fieldName\":{fieldValue:<JsonObj>, fieldOption:{isShared:<boolean>}}[, ...]}\n// Connection Options\n\noption.connectionDefaultFieldObj = null; // Default fields which are set when a connection is created. In form of {\"fieldName\":{fieldValue:<JsonObj>, fieldOption:{isShared:<boolean>}}[, ...]}\n// SessionOptions\n\noption.sessionEnable = true; // Enable sessions. If sessions are disabled, each socket connection from the same user will be the same. Relies on Express session handling also being enabled.\n\noption.sessionCookieEnable = true; // If enabled, the server will attempt to send a easyrtcsid cookie which matches the Express session id.\n// API Hosting Options\n\noption.apiEnable = true; // Enables hosting of the EasyRTC API files.\n\noption.apiPublicFolder = \"/easyrtc\"; // Api public folder without trailing slash. Note that the demos expect this to be '/easyrtc'\n\noption.apiLabsEnable = true; // Enables hosting of the EasyRTC experimental API files located in the 'labs' sub folder\n\noption.apiOldLocationEnable = false; // [Depreciated] Listens for requests to core API files in old locations (in addition to the new standard locations)\n// Demo Options\n\noption.demosEnable = true;\noption.demosPublicFolder = \"/demos\"; // Demos public folder without trailing slash. This sets the public URL where where demos are hosted, such as http://yourdomain/demos/\n// Log options - Only apply if internal 'log' event is used\n\noption.logLevel = \"info\"; // The minimum log level to show. (debug|info|warning|error|none)\n\noption.logDateEnable = false; // Display timestamp in each entry\n\noption.logErrorStackEnable = true; // print the stack trace in logged errors when available\n\noption.logWarningStackEnable = true; // print the stack trace in logged warnings when available\n\noption.logColorEnable = true; // include console colors. Disable if forwarding logs to files or databases\n\noption.logObjectDepth = 7; // When objects are included in the log, this is the max depth the log will display\n\noption.logMessagesEnable = false; // Log the full contents of incoming and outgoing messages. Also requires the logLevel to be set at \"debug\". Introduces security and performance concerns.\n// Miscellaneous Server Options\n\noption.updateCheckEnable = true; // Checks for updates\n// Regular expressions for validating names and other input\n\noption.apiVersionRegExp = /^[a-z0-9_.+-]{1,32}$/i; // API Version\n\noption.appNameRegExp = /^[a-z0-9_.-]{1,32}$/i; // Application name\n\noption.easyrtcidRegExp = /^[a-z0-9_.-]{1,32}$/i; // EasyRTC socket id (easyrtcid)\n\noption.easyrtcsidRegExp = /^[a-z0-9_.-]{1,64}$/i; // EasyRTC session id (easyrtcsid)\n\noption.groupNameRegExp = /^[a-z0-9_.-]{1,32}$/i; // Group name\n\noption.fieldNameRegExp = /^[a-z0-9_. -]{1,32}$/i; // Field names (for defining app and room custom fields)\n\noption.optionNameRegExp = /^[a-z0-9_. -]{1,32}$/i; // Option names (for defining server options)\n\noption.presenceShowRegExp = /^(away|chat|dnd|xa)$/; // Allowed presence \"show\" values (for setPresence command)\n\noption.presenceStatusRegExp = /^(.){0,255}$/; // Allowed presence \"status\" value\n\noption.roomNameRegExp = /^[a-z0-9_.-]{1,32}$/i; // Room name\n\noption.usernameRegExp = /^(.){1,64}$/i; // Username\n// Allows the option object to be seen by the caller.\n\nmodule.exports = option;","map":null,"metadata":{},"sourceType":"script"}